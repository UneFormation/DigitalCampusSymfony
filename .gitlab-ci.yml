image: docker:stable

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DEPLOYMENT_TRAEFIK_PATH: "dc_symfony"
  DEPLOYMENT_DOMAIN: 'dc.patiashvili.fr'

services:
  - docker:dind

stages:
  - Build primary resources
  - Test
  - Build
  - Deployment

build:resources:
  stage: Build primary resources
  only:
    refs:
      - main
    changes:
      - ".gitlab-ci.yml"
      - "Dockerfile"
      - "composer.json"
      - "composer.lock"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker info
    - docker pull $CI_REGISTRY_IMAGE:php-main || true
    - docker build --build-arg SSH_PRIVATE_KEY --cache-from ${CI_REGISTRY_IMAGE}:php-main --tag ${CI_REGISTRY_IMAGE}:php-main -f Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:php-main

#test:
#  stage: Test
#  before_script:
#    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#  script:
#    - docker info
#    - docker pull $CI_REGISTRY_IMAGE:php-${CI_COMMIT_REF_SLUG} || true
#    - docker run --rm -w /app -v "$(pwd):/app" $CI_REGISTRY_IMAGE:php-main composer install
#    - docker run --rm -w /app -v "$(pwd):/app" $CI_REGISTRY_IMAGE:php-main php bin/phpunit

build:app:
  stage: Build
  only:
    - tags
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:app-latest || true
    - docker build --cache-from ${CI_REGISTRY_IMAGE}:app-latest --tag ${CI_REGISTRY_IMAGE}:app-${CI_COMMIT_TAG} --tag ${CI_REGISTRY_IMAGE}:app-latest -f Dockerfile.deploy .
    - docker push $CI_REGISTRY_IMAGE:app-${CI_COMMIT_TAG}
    - docker push $CI_REGISTRY_IMAGE:app-latest

deploy:production:
  stage: Deployment
  needs:
    - build:app
  only:
    - tags
  environment:
    action: start
    name: 'production'
    url: 'https://dc.patiashvili.fr'
  script:
    - mkdir ~/.ssh
    - cp "${SSH_PRIVATE_DEPLOYEMENT_KNOWN_HOST}" ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # Add ssh key
    - eval $(ssh-agent -s)
    - cat "$SSH_PRIVATE_DEPLOYEMENT_KEY" | ssh-add
    # Copy configuration file
    - scp -P ${SSH_PRIVATE_DEPLOYMENT_PORT} -p ${ENV_PRODUCTION} ${SSH_PRIVATE_DEPLOYMENT_USER}@${SSH_PRIVATE_DEPLOYMENT_HOST}:/home/${SSH_PRIVATE_DEPLOYMENT_USER}/env/${DEPLOYMENT_TRAEFIK_PATH}-main
    # Log into docker registry
    - ssh -p ${SSH_PRIVATE_DEPLOYMENT_PORT} ${SSH_PRIVATE_DEPLOYMENT_USER}@${SSH_PRIVATE_DEPLOYMENT_HOST} "docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} registry.patiashvili.fr"
    - >
      ssh -p ${SSH_PRIVATE_DEPLOYMENT_PORT} ${SSH_PRIVATE_DEPLOYMENT_USER}@${SSH_PRIVATE_DEPLOYMENT_HOST} "docker run
      --restart always
      --label traefik.enable=true
      --label traefik.http.services.web_${DEPLOYMENT_TRAEFIK_PATH}_${CI_COMMIT_REF_SLUG}.loadbalancer.server.port=80
      --label \"traefik.http.routers.web_${DEPLOYMENT_TRAEFIK_PATH}_${CI_COMMIT_REF_SLUG}.rule=Host(\\\`${DEPLOYMENT_DOMAIN}\\\`)\"
      --label traefik.http.routers.web_${DEPLOYMENT_TRAEFIK_PATH}_${CI_COMMIT_REF_SLUG}.middlewares=SecHeader@file
      --label traefik.http.routers.web_${DEPLOYMENT_TRAEFIK_PATH}_${CI_COMMIT_REF_SLUG}.tls=true
      --label traefik.http.routers.web_${DEPLOYMENT_TRAEFIK_PATH}_${CI_COMMIT_REF_SLUG}.tls.certresolver=letsencrypt
      --env-file /home/${SSH_PRIVATE_DEPLOYMENT_USER}/env/${DEPLOYMENT_TRAEFIK_PATH}-main
      --name ${DEPLOYMENT_DOMAIN}_${CI_COMMIT_REF_SLUG}
      --network traefik_proxy
      -d ${CI_REGISTRY_IMAGE}:app-${CI_COMMIT_TAG}"